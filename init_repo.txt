To Create a repo locally

1) Create a new folder for your project and add your files
2) git init     => To initialize a new repository
3) git status   => To see untracked/tracked changes
4) git add .     => To track changes of all files
5) git commit -m "<Title message>" -m "<description text>"    -> To commit the changes to the repo
6) Create a new empty repository in GitHub
7) git remote add origin "<Paste the link you get from GitHub new repo page>"     => To push the changes to the online repository. 
8) git push -u origin master  => Pushes the changes to the repo. -u specifies the upstream. This will be the branch that we push to by default.so we dont have to write master each time



Tips:

git branch => to see the branches in the repo
git checkout -b <name of the new branch>   => checkout is used to switch btw branches and -b is used to create a new branch. naming convention is upto you.
git diff <branch name>  => will display the changes between your current branch and the one you specified in the command. press enter to go line by line and press q to exit.

git push --set-upstream origin develop-readme-instructions  => To push the changes to the remote repository
or 
git push -u origin develop-readme-instructions => -u is the shorthand for --set-upstream. It is the same thing.


9) After performing the above steps, you need to create pull request from the feature branch to your main/master branch
10) git branch -d <feature branch name>  => Once done, you will need to delete the feature branch using this command. Because we don't normally use a feature branch once a pull req has been created
11) git pull origin master => This command will fetch the changes merged to master using the PR and will update the local master branch




Added new commands
git commit -am "<Commit Message>"   => This command will add and commit the changes with the message. It only works for modified files and does not work for newly created ones


git merge master => from your feature branch, use this command once local master is updated from remote master. This will merge the changes with your feature branch   
                    and will let you know if there are any merge conflicts and you can choose to resolve them


git commit -am "message" =>to add and commit the merged changes




If you added a new to staging using git add <filename> or git add ., then you can use the below command to undo the staging.
12) git reset <filename>  => Filename is only an optional parameter

In case you committed a change and you want to undo this, use the following command:
13) git reset HEAD~1    => Head is a pointer to the last commit and 1 indicates to point to 1 commit before HEAD. This will unstage and uncommit the changes

14) git log => Gives you a log of all the commits arranged in reverse chronological order. You can use the hash to roll back the previous commit

15) git reset ecb1662953a463c425ee1cc16427e483cb881f09 => Unstaged all changes part of this commit
or
git reset --hard ecb1662953a463c425ee1cc16427e483cb881f09 => All changes part of this commit will be unstaged and also removed

16) git revert <commit name>  - To revert a commit in Git

git pull = git fetch +  git merge